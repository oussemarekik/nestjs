name: Backend
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the “main” branch
  push:
    branches: [‘main’]
env:
  REGISTRY: ${{ secrets.REGISTRY }}
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2
      - name: Build container image
        run: docker build -t $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7) .
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Remove all old images
        run: if [ ! -z “$(doctl registry repository list | grep “$(echo $IMAGE_NAME)“)” ]; then doctl registry repository delete-manifest $(echo $IMAGE_NAME) $(doctl registry repository list-tags $(echo $IMAGE_NAME) | grep -o “sha.*“) --force; else echo “No repository”; fi
      - name: Push image to DigitalOcean Container Registry
        run: docker push $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ‘’
          envs: IMAGE_NAME,REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA
          script: |
            # Login to registry
            cat ~/.ssh/id_rsa
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker stop $(echo $IMAGE_NAME)
            # Remove old container
            docker rm $(echo $IMAGE_NAME)
            # Run a new container from a new image
            docker run -d \
            -p 3000:3000 \
            -e DB_PORT_DEV=${{ secrets.DB_PORT_DEV}} \
            -e DB_HOST_DEV=${{ secrets.DB_HOST_DEV }} \
            -e DB_USER_DEV=${{ secrets.DB_USER_DEV }} \
            -e DB_PASS_DEV=${{ secrets.DB_PASS_DEV }} \
            -e DB_DATABASE_DEV=${{ secrets.DB_DATABASE_DEV }} \
            -e DB_CA_CERT_DEV=${{ secrets.DB_CA_CERT_DEV }} \
            -e EMAIL_API_KEY=${{ secrets.EMAIL_API_KEY }} \
            -e EMAIL_API_SECRET=${{ secrets.EMAIL_API_SECRET }} \
            -e DEFAULT_SENDER_EMAIL=${{ secrets.DEFAULT_SENDER_EMAIL }} \
            -e DEFAULT_RECEIVER_EMAIL=${{ secrets.DEFAULT_RECEIVER_EMAIL }} \
            -e STORAGE_REGION=${{ secrets.STORAGE_REGION }} \
            -e STORAGE_ACCESS_KEY_ID=${{ secrets.STORAGE_ACCESS_KEY_ID }} \
            -e STORAGE_SECRET_ACCESS_KEY=${{ secrets.STORAGE_SECRET_ACCESS_KEY }} \
            -e STORAGE_ENDPOINT=${{ secrets.STORAGE_ENDPOINT }} \
            -e STORAGE_NAME=${{ secrets.STORAGE_NAME }} \
            -e ACCESS_TOKEN_SECRET=${{ secrets.ACCESS_TOKEN_SECRET }} \
            -e REFRESH_TOKEN_EXPIRATION=${{ secrets.REFRESH_TOKEN_EXPIRATION }} \
            -e ACCESS_TOKEN_EXPIRATION=${{ secrets.ACCESS_TOKEN_EXPIRATION }} \
            -e REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }} \
            -e MAPS_PROVIDER=${{ secrets.MAPS_PROVIDER }} \
            -e MAPS_ACCESS_KEY=${{ secrets.MAPS_ACCESS_KEY }} \
            -e FRONTEND_BASE_URL_DEV=${{ secrets.FRONTEND_BASE_URL_DEV }} \
            -e NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }} \
            --restart always \
            --name $(echo $IMAGE_NAME) \
            $(echo $REGISTRY)/$(echo $IMAGE_NAME):$(echo $GITHUB_SHA | head -c7)
